# Test sample: c0869e7f1bb4914fa453db5eb9cafd6fea090f7c6c156b9f1a3479e0ce7f4df2
# Reference: https://gist.github.com/X-Junior/2c49f52b5361bf28c3eba8a825a72ebe

from elftools.elf.elffile import ELFFile

def is_ascii(s):
    return all(ord(c) < 128 for c in s)

def process_data_section(file_path):
    with open(file_path, 'rb') as file:
        elf_file = ELFFile(file)

        # Find the .data section
        data_section = next((section for section in elf_file.iter_sections() if section.name.startswith('.data')), None)
        if data_section is None:
            print("No .data section found in the ELF file.")
            return None

        # read .data section
        data_offset = data_section['sh_offset']
        data_size = data_section['sh_size']
        with open(file_path, 'rb') as file:
            file.seek(data_offset)
            enc_data = file.read(data_size)[1:]

        # Decrypt and process the data
        xor_key = 57  # Update XOR key to 57
        dec_strings = []
        dec_string = ""
        filtered_string = ""  # Initialize filtered_string
        blob_start = 0
        for index, byte in enumerate(enc_data):
            if byte == xor_key:
                if is_ascii(dec_string):
                    filtered_string = ''.join(char for char in dec_string if char != '9' and char != '\x00')
                    print(f"Decrypted ASCII String: {filtered_string}")
                dec_strings.append(filtered_string)
                dec_string = ""
                blob_start = index + 1
            dec_string += chr(byte ^ xor_key)

        return dec_strings

# Replace 'your_file_path.elf' with the path to your ELF file
file_path = 'your sample path'
decrypted_strings = process_data_section(file_path)
